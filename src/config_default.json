{
   "currentMethod":"BE",
   "dataset":{
      "name":"cifar10",
      "sub_directory":null,
      "include_classes":null,
      "exclude_classes":null,
      "train_valid_split_seed": 67280421310721
   },
   "neptune_mode":"debug",
   "device":"cuda:0",
   "tags":["development"],
   "augmentations":[ {
                  "augmentation_name":"mixup",
                  "augmentation_params":{

                  }
               }],
   "UQMethods":{
      "BE":{
         "source_files":[
            "./src/config_default.json",
            "./src/train_model.py",
            "./src/config_BE.py",
            "./src/architectures/ensemble.py",
            "./src/densities/kernel.py",
            "./src/architectures/gradient_estim.py",
            "./src/processing.py",
            "./src/optimizer.py",
            "./src/loss.py",
            "./src/architectures/selunet.py",
            "./src/callback.py",
            "./src/densities/distributions.py",
            "./src/neptune_callback.py",
            "./src/neptune_tracking.py",
            "./src/uncertainty_utils.py",
            "./src/net_utils.py",
            "./src/constants.py",
            "./src/evaluation.py",
            "./src/datasets.py"
         ],
         "training":{
            "batch_size":128,
            "use_wd":false,
            "num_models":20,
            "num_epochs":150,
            "rand_flip_prob":0.5,
            "learning_rate":0.00025,
            "weights_seed":null,
            "prior_variance":0.1,
            "pred_dist_std":1,
            "eta":0.01,
            "do_auto_repulse":true,
            "gamma":1,
            "annealing_steps":0,
            "density_method":"ssge",
            "use_lr_scheduler": false
         },
         "network":{
            "base_network":"ConvNet",
            "net_params":{
               "channels_in":3,
               "num_channels_out":[
                  6,
                  16
               ],
               "kernel_size":5,
               "conv_stride":1,
               "max_pool":2,
               "pool_stride":2,
               "num_conv":2,
               "num_hidden":[
                  120,
                  84
               ],
               "num_linear":3,
               "num_classes":10,
               "activation":"RELU"
            }
         },
         "loss":{
            "loss_func":"EnsembleClassificationLoss",
            "loss_params":{
               "is_logits":false
            }
         },
         "evaluation":{
            "callbacks":[
               {
                  "callback_name":"calc_validation_total_entropy",
                  "callback_params":{
                     "do_activate":false,
                     "log_base_str":"two"
                  }
               }
            ]
         },
         "schedulers":{
            "lr_sched":"CosineDecayWithWarmup",
            "lr_sched_params":{
               "lr_warmup_epochs":1,
               "lr_decay_ratio":0.2,
               "reference_batch_size": 128,
               "lr_decay_epochs":[
                  60,
                  120,
                  160
               ]
            },
            "FitOneCycle_params":{
               "div_lr_max":25.0,
               "div_final": 1e4,
               "pct_start": 0.3,
               "weight_decay":0.1
            }
         }
      },
      "SNGP":{
         "source_files":[
            "./src/config_default.json",
            "./src/train_model.py",
            "./src/config_SNGP.py",
            "./src/processing.py",
            "./src/optimizer.py",
            "./src/loss.py",
            "./src/architectures/wide_resnet.py",
            "./src/callback.py",
            "./src/densities/gaussian_process.py",
            "./src/architectures/sngp_classification_layer.py",
            "./src/densities/random_fourier_features.py",
            "./src/neptune_callback.py",
            "./src/neptune_tracking.py",
            "./src/uncertainty_utils.py",
            "./src/evaluation.py",
            "./src/net_utils.py",
            "./src/datasets.py"
         ],
         "training":{
            "batch_size":128,
            "learning_rate":0.08,
            "use_wd":false,
            "wd":3e-4,
            "use_nesterov":true,
            "one_minus_momentum":0.1,
            "num_epochs":250,
            "rand_flip_prob":0.5,
            "weights_seed":null,
            "use_lr_scheduler": false
         },
         "network":{
            "base_network":"WideResNet",
            "net_params":{
               "channels_in":3,
               "num_conv":28,
               "widen_factor":10,
               "dropout_p":0.1,
               "use_spec_norm":true,
               "spec_norm_iteration":1,
               "num_linear":0,
               "num_classes":10,
               "activation":"RELU"
            }
         },
         "loss":{
            "loss_func":"CrossEntropyClassificationLoss",
            "loss_params":{
               "is_logits":true
            }
         },
         "model_params":{
            "pre_clas_features":null,
            "custom_random_features_initializer":null,
            "feature_multiplier":64
         },
         "evaluation":{
            "callbacks":[
               {
                  "callback_name":"calc_sngp_uncertainty",
                  "callback_params":{
                     "log_base_str":"natural"
                  }
               }
            ]
         },
         "schedulers":{
            "lr_sched":"CosineDecayWithWarmup",
            "lr_sched_params":{
               "lr_warmup_epochs":1,
               "lr_decay_ratio":0.2,
               "reference_batch_size": 128,
               "lr_decay_epochs":[
                  60,
                  120,
                  160
               ]
            },
            "FitOneCycle_params":{
               "div_lr_max":25.0,
               "div_final": 1e4,
               "pct_start": 0.3,
               "weight_decay":0.1
            }
         }
      },
      "PN":{
         "source_files":[
            "./src/config_default.json",
            "./src/train_model.py",
            "./src/config_PN.py",
            "./src/processing.py",
            "./src/optimizer.py",
            "./src/loss.py",
            "./src/callback.py",
            "./src/architectures/posteriornet.py",
            "./src/architectures/linear_sequential.py",
            "./src/architectures/convolution_sequential.py",
            "./src/architectures/convolution_linear_sequential.py",
            "./src/architectures/spectral_conv.py",
            "./src/architectures/spectral_linear.py",
            "./src/densities/MixtureDensity.py",
            "./src/densities/NormalizingFlowDensity.py",
            "./src/densities/BatchedNormalizingFlowDensity.py",
            "./src/neptune_callback.py",
            "./src/neptune_tracking.py",
            "./src/uncertainty_utils.py",
            "./src/evaluation.py",
            "./src/net_utils.py",
            "./src/datasets.py"
         ],
         "training":{
            "batch_size":64,
            "num_epochs":200,
            "use_wd":false,
            "wd":0.0003,
            "one_minus_momentum":0.1,
            "rand_flip_prob":0.5,
            "learning_rate":0.0005,
            "weights_seed":null,
            "include_classes":null,
            "exclude_classes":null,
            "use_lr_scheduler": false
         },
         "network":{
            "base_network":"ConvLinSeq",
            "net_params":{
               "input_dims":[
                  32,
                  32,
                  3
               ],
               "linear_hidden_dims":[
                  64,
                  64,
                  64
               ],
               "conv_hidden_dims":[
                  64,
                  64,
                  64
               ],
               "output_dim":6,
               "num_classes":10,
               "kernel_dim":5,
               "k_lipschitz":null,
               "p_drop":null,
               "activation":"RELU"
            }
         },
         "loss":{
            "loss_func":"CrossEntropyClassificationLoss",
            "loss_params":{
               "is_logits":true
            }
         },
         "post_net_params":{
            "no_density":false,
            "density_type":"radial_flow",
            "n_density":6,
            "init_weights":true
         },
         "evaluation":{
            "callbacks":[
               {
                  "callback_name":"calc_dirichlet_uncertainty",
                  "callback_params":{
                     "eps":1e-20,
                     "normalize_uncertainty":false
                  }
               }
            ]
         },
         "schedulers":{
            "lr_sched":"CosineDecayWithWarmup",
            "lr_sched_params":{
               "lr_warmup_epochs":1,
               "lr_decay_ratio":0.2,
               "reference_batch_size": 128,
               "lr_decay_epochs":[
                  60,
                  120,
                  160
               ]
            },
            "FitOneCycle_params":{
               "div_lr_max":25.0,
               "div_final": 1e4,
               "pct_start": 0.3,
               "weight_decay":0.1
            }
         }
      }
   }
}